/*
* generated by Xtext
*/

package soot.typestate.automata.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;

import org.eclipse.xtext.service.GrammarProvider;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class AutomataGrammarAccess implements IGrammarAccess {
	
	
	public class AutomataElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Automata");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPackageAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPackagePackageParserRuleCall_0_0 = (RuleCall)cPackageAssignment_0.eContents().get(0);
		private final Assignment cAutomataAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAutomataAutomatonParserRuleCall_1_0 = (RuleCall)cAutomataAssignment_1.eContents().get(0);
		
		//Automata:
		//  package=Package? automata+=Automaton+;
		public ParserRule getRule() { return rule; }

		//package=Package? automata+=Automaton+
		public Group getGroup() { return cGroup; }

		//package=Package?
		public Assignment getPackageAssignment_0() { return cPackageAssignment_0; }

		//Package
		public RuleCall getPackagePackageParserRuleCall_0_0() { return cPackagePackageParserRuleCall_0_0; }

		//automata+=Automaton+
		public Assignment getAutomataAssignment_1() { return cAutomataAssignment_1; }

		//Automaton
		public RuleCall getAutomataAutomatonParserRuleCall_1_0() { return cAutomataAutomatonParserRuleCall_1_0; }
	}

	public class PackageElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameJAVAIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Package:
		//  "package" name=JAVAID ";";
		public ParserRule getRule() { return rule; }

		//"package" name=JAVAID ";"
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=JAVAID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//JAVAID
		public RuleCall getNameJAVAIDParserRuleCall_1_0() { return cNameJAVAIDParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class AutomatonElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Automaton");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAutomatonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKlassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKlassClassParserRuleCall_1_0 = (RuleCall)cKlassAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cInitialKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cInitialStateAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cInitialStateStateCrossReference_5_0 = (CrossReference)cInitialStateAssignment_5.eContents().get(0);
		private final RuleCall cInitialStateStateIDTerminalRuleCall_5_0_1 = (RuleCall)cInitialStateStateCrossReference_5_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cErrorKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cEqualsSignKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cErrorStateAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final CrossReference cErrorStateStateCrossReference_7_2_0 = (CrossReference)cErrorStateAssignment_7_2.eContents().get(0);
		private final RuleCall cErrorStateStateIDTerminalRuleCall_7_2_0_1 = (RuleCall)cErrorStateStateCrossReference_7_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Assignment cStatesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cStatesStateParserRuleCall_8_0 = (RuleCall)cStatesAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Automaton:
		//  "automaton" klass=Class "{" "initial" "=" initialState=[State] ";" ("error" "="
		//  errorState=[State] ";")? states+=State+ "}";
		public ParserRule getRule() { return rule; }

		//"automaton" klass=Class "{" "initial" "=" initialState=[State] ";" ("error" "="
		//errorState=[State] ";")? states+=State+ "}"
		public Group getGroup() { return cGroup; }

		//"automaton"
		public Keyword getAutomatonKeyword_0() { return cAutomatonKeyword_0; }

		//klass=Class
		public Assignment getKlassAssignment_1() { return cKlassAssignment_1; }

		//Class
		public RuleCall getKlassClassParserRuleCall_1_0() { return cKlassClassParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"initial"
		public Keyword getInitialKeyword_3() { return cInitialKeyword_3; }

		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }

		//initialState=[State]
		public Assignment getInitialStateAssignment_5() { return cInitialStateAssignment_5; }

		//[State]
		public CrossReference getInitialStateStateCrossReference_5_0() { return cInitialStateStateCrossReference_5_0; }

		//ID
		public RuleCall getInitialStateStateIDTerminalRuleCall_5_0_1() { return cInitialStateStateIDTerminalRuleCall_5_0_1; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }

		//("error" "=" errorState=[State] ";")?
		public Group getGroup_7() { return cGroup_7; }

		//"error"
		public Keyword getErrorKeyword_7_0() { return cErrorKeyword_7_0; }

		//"="
		public Keyword getEqualsSignKeyword_7_1() { return cEqualsSignKeyword_7_1; }

		//errorState=[State]
		public Assignment getErrorStateAssignment_7_2() { return cErrorStateAssignment_7_2; }

		//[State]
		public CrossReference getErrorStateStateCrossReference_7_2_0() { return cErrorStateStateCrossReference_7_2_0; }

		//ID
		public RuleCall getErrorStateStateIDTerminalRuleCall_7_2_0_1() { return cErrorStateStateIDTerminalRuleCall_7_2_0_1; }

		//";"
		public Keyword getSemicolonKeyword_7_3() { return cSemicolonKeyword_7_3; }

		//states+=State+
		public Assignment getStatesAssignment_8() { return cStatesAssignment_8; }

		//State
		public RuleCall getStatesStateParserRuleCall_8_0() { return cStatesStateParserRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class ClassElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Class");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameJAVAIDParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Class:
		//  name=JAVAID;
		public ParserRule getRule() { return rule; }

		//name=JAVAID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//JAVAID
		public RuleCall getNameJAVAIDParserRuleCall_0() { return cNameJAVAIDParserRuleCall_0; }
	}

	public class StateElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInitialAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cInitialInitialKeyword_0_0 = (Keyword)cInitialAssignment_0.eContents().get(0);
		private final Keyword cStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTransitionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTransitionsTransitionParserRuleCall_4_0 = (RuleCall)cTransitionsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//State:
		//  initial?="initial"? "state" name=ID "{" transitions+=Transition* "}";
		public ParserRule getRule() { return rule; }

		//initial?="initial"? "state" name=ID "{" transitions+=Transition* "}"
		public Group getGroup() { return cGroup; }

		//initial?="initial"?
		public Assignment getInitialAssignment_0() { return cInitialAssignment_0; }

		//"initial"
		public Keyword getInitialInitialKeyword_0_0() { return cInitialInitialKeyword_0_0; }

		//"state"
		public Keyword getStateKeyword_1() { return cStateKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//transitions+=Transition*
		public Assignment getTransitionsAssignment_4() { return cTransitionsAssignment_4; }

		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_4_0() { return cTransitionsTransitionParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class TransitionElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cMethodAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cMethodMethodParserRuleCall_0_0_0 = (RuleCall)cMethodAssignment_0_0.eContents().get(0);
		private final RuleCall cConstructorParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cStateStateCrossReference_2_0 = (CrossReference)cStateAssignment_2.eContents().get(0);
		private final RuleCall cStateStateIDTerminalRuleCall_2_0_1 = (RuleCall)cStateStateCrossReference_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Transition:
		//  (method=Method|Constructor) "->" state=[State] ";";
		public ParserRule getRule() { return rule; }

		//(method=Method|Constructor) "->" state=[State] ";"
		public Group getGroup() { return cGroup; }

		//method=Method|Constructor
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//method=Method
		public Assignment getMethodAssignment_0_0() { return cMethodAssignment_0_0; }

		//Method
		public RuleCall getMethodMethodParserRuleCall_0_0_0() { return cMethodMethodParserRuleCall_0_0_0; }

		//Constructor
		public RuleCall getConstructorParserRuleCall_0_1() { return cConstructorParserRuleCall_0_1; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }

		//state=[State]
		public Assignment getStateAssignment_2() { return cStateAssignment_2; }

		//[State]
		public CrossReference getStateStateCrossReference_2_0() { return cStateStateCrossReference_2_0; }

		//ID
		public RuleCall getStateStateIDTerminalRuleCall_2_0_1() { return cStateStateIDTerminalRuleCall_2_0_1; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class MethodElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReturntypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReturntypeTypeParserRuleCall_0_0 = (RuleCall)cReturntypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgsTypeParserRuleCall_3_0 = (RuleCall)cArgsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Method:
		//  returntype=Type name=ID "(" args+=Type* ")";
		public ParserRule getRule() { return rule; }

		//returntype=Type name=ID "(" args+=Type* ")"
		public Group getGroup() { return cGroup; }

		//returntype=Type
		public Assignment getReturntypeAssignment_0() { return cReturntypeAssignment_0; }

		//Type
		public RuleCall getReturntypeTypeParserRuleCall_0_0() { return cReturntypeTypeParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//args+=Type*
		public Assignment getArgsAssignment_3() { return cArgsAssignment_3; }

		//Type
		public RuleCall getArgsTypeParserRuleCall_3_0() { return cArgsTypeParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ConstructorElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constructor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cClassParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsTypeParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Constructor:
		//  Class "(" args+=Type* ")";
		public ParserRule getRule() { return rule; }

		//Class "(" args+=Type* ")"
		public Group getGroup() { return cGroup; }

		//Class
		public RuleCall getClassParserRuleCall_0() { return cClassParserRuleCall_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//args+=Type*
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }

		//Type
		public RuleCall getArgsTypeParserRuleCall_2_0() { return cArgsTypeParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class TypeElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameJAVAIDParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Type:
		//  name=JAVAID;
		public ParserRule getRule() { return rule; }

		//name=JAVAID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//JAVAID
		public RuleCall getNameJAVAIDParserRuleCall_0() { return cNameJAVAIDParserRuleCall_0; }
	}

	public class JAVAIDElements implements IParserRuleAccess {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JAVAID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//JAVAID returns ecore::EString:
		//  ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private AutomataElements pAutomata;
	private PackageElements pPackage;
	private AutomatonElements pAutomaton;
	private ClassElements pClass;
	private StateElements pState;
	private TransitionElements pTransition;
	private MethodElements pMethod;
	private ConstructorElements pConstructor;
	private TypeElements pType;
	private JAVAIDElements pJAVAID;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public AutomataGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Automata:
	//  package=Package? automata+=Automaton+;
	public AutomataElements getAutomataAccess() {
		return (pAutomata != null) ? pAutomata : (pAutomata = new AutomataElements());
	}
	
	public ParserRule getAutomataRule() {
		return getAutomataAccess().getRule();
	}

	//Package:
	//  "package" name=JAVAID ";";
	public PackageElements getPackageAccess() {
		return (pPackage != null) ? pPackage : (pPackage = new PackageElements());
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}

	//Automaton:
	//  "automaton" klass=Class "{" "initial" "=" initialState=[State] ";" ("error" "="
	//  errorState=[State] ";")? states+=State+ "}";
	public AutomatonElements getAutomatonAccess() {
		return (pAutomaton != null) ? pAutomaton : (pAutomaton = new AutomatonElements());
	}
	
	public ParserRule getAutomatonRule() {
		return getAutomatonAccess().getRule();
	}

	//Class:
	//  name=JAVAID;
	public ClassElements getClassAccess() {
		return (pClass != null) ? pClass : (pClass = new ClassElements());
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}

	//State:
	//  initial?="initial"? "state" name=ID "{" transitions+=Transition* "}";
	public StateElements getStateAccess() {
		return (pState != null) ? pState : (pState = new StateElements());
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//Transition:
	//  (method=Method|Constructor) "->" state=[State] ";";
	public TransitionElements getTransitionAccess() {
		return (pTransition != null) ? pTransition : (pTransition = new TransitionElements());
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	//Method:
	//  returntype=Type name=ID "(" args+=Type* ")";
	public MethodElements getMethodAccess() {
		return (pMethod != null) ? pMethod : (pMethod = new MethodElements());
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}

	//Constructor:
	//  Class "(" args+=Type* ")";
	public ConstructorElements getConstructorAccess() {
		return (pConstructor != null) ? pConstructor : (pConstructor = new ConstructorElements());
	}
	
	public ParserRule getConstructorRule() {
		return getConstructorAccess().getRule();
	}

	//Type:
	//  name=JAVAID;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//JAVAID returns ecore::EString:
	//  ID ("." ID)*;
	public JAVAIDElements getJAVAIDAccess() {
		return (pJAVAID != null) ? pJAVAID : (pJAVAID = new JAVAIDElements());
	}
	
	public ParserRule getJAVAIDRule() {
		return getJAVAIDAccess().getRule();
	}

	//terminal ID:
	//  "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//  "0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//  "\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" |
	//  "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//  "/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//  "//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//  (" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//  .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
