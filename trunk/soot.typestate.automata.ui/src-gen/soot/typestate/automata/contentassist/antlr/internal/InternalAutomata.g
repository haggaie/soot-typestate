/*
* generated by Xtext
*/
grammar InternalAutomata;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package soot.typestate.automata.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package soot.typestate.automata.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.common.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import soot.typestate.automata.services.AutomataGrammarAccess;

}

@parser::members {
 
 	private AutomataGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(AutomataGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleAutomata
entryRuleAutomata :
{ before(grammarAccess.getAutomataRule()); }
	 ruleAutomata
{ after(grammarAccess.getAutomataRule()); } 
	 EOF 
;

// Rule Automata
ruleAutomata 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getAutomataAccess().getGroup()); }
(rule__Automata__Group__0)
{ after(grammarAccess.getAutomataAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePackage
entryRulePackage :
{ before(grammarAccess.getPackageRule()); }
	 rulePackage
{ after(grammarAccess.getPackageRule()); } 
	 EOF 
;

// Rule Package
rulePackage 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getPackageAccess().getGroup()); }
(rule__Package__Group__0)
{ after(grammarAccess.getPackageAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAutomaton
entryRuleAutomaton :
{ before(grammarAccess.getAutomatonRule()); }
	 ruleAutomaton
{ after(grammarAccess.getAutomatonRule()); } 
	 EOF 
;

// Rule Automaton
ruleAutomaton 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getAutomatonAccess().getGroup()); }
(rule__Automaton__Group__0)
{ after(grammarAccess.getAutomatonAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClass
entryRuleClass :
{ before(grammarAccess.getClassRule()); }
	 ruleClass
{ after(grammarAccess.getClassRule()); } 
	 EOF 
;

// Rule Class
ruleClass 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getClassAccess().getNameAssignment()); }
(rule__Class__NameAssignment)
{ after(grammarAccess.getClassAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleState
entryRuleState :
{ before(grammarAccess.getStateRule()); }
	 ruleState
{ after(grammarAccess.getStateRule()); } 
	 EOF 
;

// Rule State
ruleState 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getStateAccess().getGroup()); }
(rule__State__Group__0)
{ after(grammarAccess.getStateAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTransition
entryRuleTransition :
{ before(grammarAccess.getTransitionRule()); }
	 ruleTransition
{ after(grammarAccess.getTransitionRule()); } 
	 EOF 
;

// Rule Transition
ruleTransition 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getTransitionAccess().getGroup()); }
(rule__Transition__Group__0)
{ after(grammarAccess.getTransitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMethod
entryRuleMethod :
{ before(grammarAccess.getMethodRule()); }
	 ruleMethod
{ after(grammarAccess.getMethodRule()); } 
	 EOF 
;

// Rule Method
ruleMethod 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getMethodAccess().getGroup()); }
(rule__Method__Group__0)
{ after(grammarAccess.getMethodAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleType
entryRuleType :
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getTypeAccess().getNameAssignment()); }
(rule__Type__NameAssignment)
{ after(grammarAccess.getTypeAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJAVAID
entryRuleJAVAID :
{ before(grammarAccess.getJAVAIDRule()); }
	 ruleJAVAID
{ after(grammarAccess.getJAVAIDRule()); } 
	 EOF 
;

// Rule JAVAID
ruleJAVAID 
    @init {
		int stackSize = keepStackSize();
    }
 :
(
{ before(grammarAccess.getJAVAIDAccess().getGroup()); }
(rule__JAVAID__Group__0)
{ after(grammarAccess.getJAVAIDAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Automata__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAutomataAccess().getPackageAssignment_0()); }
(rule__Automata__PackageAssignment_0)?
{ after(grammarAccess.getAutomataAccess().getPackageAssignment_0()); }
)

	rule__Automata__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Automata__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getAutomataAccess().getAutomataAssignment_1()); }
(rule__Automata__AutomataAssignment_1)
{ after(grammarAccess.getAutomataAccess().getAutomataAssignment_1()); }
)
(
{ before(grammarAccess.getAutomataAccess().getAutomataAssignment_1()); }
(rule__Automata__AutomataAssignment_1)*
{ after(grammarAccess.getAutomataAccess().getAutomataAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Package__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getPackageKeyword_0()); }

	'package' 

{ after(grammarAccess.getPackageAccess().getPackageKeyword_0()); }
)

	rule__Package__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Package__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getJAVAIDParserRuleCall_1()); }
	ruleJAVAID
{ after(grammarAccess.getPackageAccess().getJAVAIDParserRuleCall_1()); }
)

	rule__Package__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Package__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackageAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getPackageAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Automaton__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAutomatonAccess().getAutomatonKeyword_0()); }

	'automaton' 

{ after(grammarAccess.getAutomatonAccess().getAutomatonKeyword_0()); }
)

	rule__Automaton__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Automaton__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAutomatonAccess().getClassParserRuleCall_1()); }
	ruleClass
{ after(grammarAccess.getAutomatonAccess().getClassParserRuleCall_1()); }
)

	rule__Automaton__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Automaton__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAutomatonAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getAutomatonAccess().getLeftCurlyBracketKeyword_2()); }
)

	rule__Automaton__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__Automaton__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getAutomatonAccess().getStatesAssignment_3()); }
(rule__Automaton__StatesAssignment_3)
{ after(grammarAccess.getAutomatonAccess().getStatesAssignment_3()); }
)
(
{ before(grammarAccess.getAutomatonAccess().getStatesAssignment_3()); }
(rule__Automaton__StatesAssignment_3)*
{ after(grammarAccess.getAutomatonAccess().getStatesAssignment_3()); }
)
)

	rule__Automaton__Group__4
;
finally {
	restoreStackSize(stackSize);
}


rule__Automaton__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAutomatonAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getAutomatonAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__State__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getInitialAssignment_0()); }
(rule__State__InitialAssignment_0)?
{ after(grammarAccess.getStateAccess().getInitialAssignment_0()); }
)

	rule__State__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getStateKeyword_1()); }

	'state' 

{ after(grammarAccess.getStateAccess().getStateKeyword_1()); }
)

	rule__State__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getNameAssignment_2()); }
(rule__State__NameAssignment_2)
{ after(grammarAccess.getStateAccess().getNameAssignment_2()); }
)

	rule__State__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getStateAccess().getLeftCurlyBracketKeyword_3()); }
)

	rule__State__Group__4
;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getTransitionsAssignment_4()); }
(rule__State__TransitionsAssignment_4)*
{ after(grammarAccess.getStateAccess().getTransitionsAssignment_4()); }
)

	rule__State__Group__5
;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getStateAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Transition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getMethodAssignment_0()); }
(rule__Transition__MethodAssignment_0)
{ after(grammarAccess.getTransitionAccess().getMethodAssignment_0()); }
)

	rule__Transition__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getHyphenMinusGreaterThanSignKeyword_1()); }

	'->' 

{ after(grammarAccess.getTransitionAccess().getHyphenMinusGreaterThanSignKeyword_1()); }
)

	rule__Transition__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getStateAssignment_2()); }
(rule__Transition__StateAssignment_2)
{ after(grammarAccess.getTransitionAccess().getStateAssignment_2()); }
)

	rule__Transition__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getTransitionAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Method__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodAccess().getReturntypeAssignment_0()); }
(rule__Method__ReturntypeAssignment_0)
{ after(grammarAccess.getMethodAccess().getReturntypeAssignment_0()); }
)

	rule__Method__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodAccess().getNameAssignment_1()); }
(rule__Method__NameAssignment_1)
{ after(grammarAccess.getMethodAccess().getNameAssignment_1()); }
)

	rule__Method__Group__2
;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getMethodAccess().getLeftParenthesisKeyword_2()); }
)

	rule__Method__Group__3
;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodAccess().getArgsAssignment_3()); }
(rule__Method__ArgsAssignment_3)*
{ after(grammarAccess.getMethodAccess().getArgsAssignment_3()); }
)

	rule__Method__Group__4
;
finally {
	restoreStackSize(stackSize);
}


rule__Method__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getMethodAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__JAVAID__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJAVAIDAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getJAVAIDAccess().getIDTerminalRuleCall_0()); }
)

	rule__JAVAID__Group__1
;
finally {
	restoreStackSize(stackSize);
}


rule__JAVAID__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJAVAIDAccess().getGroup_1()); }
(rule__JAVAID__Group_1__0)*
{ after(grammarAccess.getJAVAIDAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__JAVAID__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJAVAIDAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getJAVAIDAccess().getFullStopKeyword_1_0()); }
)

	rule__JAVAID__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}


rule__JAVAID__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJAVAIDAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getJAVAIDAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Automata__PackageAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAutomataAccess().getPackagePackageParserRuleCall_0_0()); }
	rulePackage{ after(grammarAccess.getAutomataAccess().getPackagePackageParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Automata__AutomataAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAutomataAccess().getAutomataAutomatonParserRuleCall_1_0()); }
	ruleAutomaton{ after(grammarAccess.getAutomataAccess().getAutomataAutomatonParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Automaton__StatesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAutomatonAccess().getStatesStateParserRuleCall_3_0()); }
	ruleState{ after(grammarAccess.getAutomatonAccess().getStatesStateParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Class__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getNameJAVAIDParserRuleCall_0()); }
	ruleJAVAID{ after(grammarAccess.getClassAccess().getNameJAVAIDParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__State__InitialAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getInitialInitialKeyword_0_0()); }
(
{ before(grammarAccess.getStateAccess().getInitialInitialKeyword_0_0()); }

	'initial' 

{ after(grammarAccess.getStateAccess().getInitialInitialKeyword_0_0()); }
)

{ after(grammarAccess.getStateAccess().getInitialInitialKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__State__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getStateAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__State__TransitionsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getTransitionsTransitionParserRuleCall_4_0()); }
	ruleTransition{ after(grammarAccess.getStateAccess().getTransitionsTransitionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__MethodAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getMethodMethodParserRuleCall_0_0()); }
	ruleMethod{ after(grammarAccess.getTransitionAccess().getMethodMethodParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__StateAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getStateStateCrossReference_2_0()); }
(
{ before(grammarAccess.getTransitionAccess().getStateStateIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getTransitionAccess().getStateStateIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getTransitionAccess().getStateStateCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Method__ReturntypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodAccess().getReturntypeTypeParserRuleCall_0_0()); }
	ruleType{ after(grammarAccess.getMethodAccess().getReturntypeTypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Method__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getMethodAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Method__ArgsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodAccess().getArgsTypeParserRuleCall_3_0()); }
	ruleType{ after(grammarAccess.getMethodAccess().getArgsTypeParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getNameJAVAIDParserRuleCall_0()); }
	ruleJAVAID{ after(grammarAccess.getTypeAccess().getNameJAVAIDParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


