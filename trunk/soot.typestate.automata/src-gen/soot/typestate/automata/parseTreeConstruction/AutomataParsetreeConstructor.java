/*
* generated by Xtext
*/
package soot.typestate.automata.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IInstanceDescription;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import soot.typestate.automata.services.AutomataGrammarAccess;

import com.google.inject.Inject;

public class AutomataParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private AutomataGrammarAccess grammarAccess;
		
	public AutomataGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}

	protected AbstractToken getRootToken(IInstanceDescription inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IInstanceDescription inst) {
		super(inst);
	}
	
	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Automata_Group(this, this, 0, inst);
			case 1: return new Package_Group(this, this, 1, inst);
			case 2: return new Automaton_Group(this, this, 2, inst);
			case 3: return new Class_NameAssignment(this, this, 3, inst);
			case 4: return new State_Group(this, this, 4, inst);
			case 5: return new Transition_Alternatives(this, this, 5, inst);
			case 6: return new InvocationTransition_Group(this, this, 6, inst);
			case 7: return new BranchedTransition_Group(this, this, 7, inst);
			case 8: return new Invocation_Alternatives(this, this, 8, inst);
			case 9: return new Method_Group(this, this, 9, inst);
			case 10: return new Constructor_Group(this, this, 10, inst);
			case 11: return new Type_NameAssignment(this, this, 11, inst);
			case 12: return new BooleanLiteral_Alternatives(this, this, 12, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Automata ****************
 *
 * Automata:
 *   package=Package? automata+=Automaton+;
 *
 **/

// package=Package? automata+=Automaton+
protected class Automata_Group extends GroupToken {
	
	public Automata_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAutomataAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Automata_AutomataAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAutomataRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// package=Package?
protected class Automata_PackageAssignment_0 extends AssignmentToken  {
	
	public Automata_PackageAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAutomataAccess().getPackageAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Package_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("package",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("package");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getPackageRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAutomataAccess().getPackagePackageParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// automata+=Automaton+
protected class Automata_AutomataAssignment_1 extends AssignmentToken  {
	
	public Automata_AutomataAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAutomataAccess().getAutomataAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Automaton_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("automata",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("automata");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAutomatonRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAutomataAccess().getAutomataAutomatonParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Automata_AutomataAssignment_1(parent, next, actIndex, consumed);
			case 1: return new Automata_PackageAssignment_0(parent, next, actIndex, consumed);
			default: return parent.createParentFollower(next, actIndex , index - 2, consumed);
		}	
	}	
}


/************ end Rule Automata ****************/


/************ begin Rule Package ****************
 *
 * Package:
 *   "package" name=JAVAID ";";
 *
 **/

// "package" name=JAVAID ";"
protected class Package_Group extends GroupToken {
	
	public Package_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getPackageAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Package_SemicolonKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getPackageRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "package"
protected class Package_PackageKeyword_0 extends KeywordToken  {
	
	public Package_PackageKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPackageAccess().getPackageKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=JAVAID
protected class Package_NameAssignment_1 extends AssignmentToken  {
	
	public Package_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getPackageAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Package_PackageKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getPackageAccess().getNameJAVAIDParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ";"
protected class Package_SemicolonKeyword_2 extends KeywordToken  {
	
	public Package_SemicolonKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getPackageAccess().getSemicolonKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Package_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Package ****************/


/************ begin Rule Automaton ****************
 *
 * Automaton:
 *   "automaton" klass=Class "{" "initial" "=" initialState=[State] ";" ("error" "="
 *   errorState=[State] ";")? states+=State+ "}";
 *
 **/

// "automaton" klass=Class "{" "initial" "=" initialState=[State] ";" ("error" "="
// errorState=[State] ";")? states+=State+ "}"
protected class Automaton_Group extends GroupToken {
	
	public Automaton_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAutomatonAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Automaton_RightCurlyBracketKeyword_9(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getAutomatonRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "automaton"
protected class Automaton_AutomatonKeyword_0 extends KeywordToken  {
	
	public Automaton_AutomatonKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAutomatonAccess().getAutomatonKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// klass=Class
protected class Automaton_KlassAssignment_1 extends AssignmentToken  {
	
	public Automaton_KlassAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAutomatonAccess().getKlassAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Class_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("klass",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("klass");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getClassRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAutomatonAccess().getKlassClassParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Automaton_AutomatonKeyword_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "{"
protected class Automaton_LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public Automaton_LeftCurlyBracketKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAutomatonAccess().getLeftCurlyBracketKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Automaton_KlassAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "initial"
protected class Automaton_InitialKeyword_3 extends KeywordToken  {
	
	public Automaton_InitialKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAutomatonAccess().getInitialKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Automaton_LeftCurlyBracketKeyword_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "="
protected class Automaton_EqualsSignKeyword_4 extends KeywordToken  {
	
	public Automaton_EqualsSignKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAutomatonAccess().getEqualsSignKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Automaton_InitialKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// initialState=[State]
protected class Automaton_InitialStateAssignment_5 extends AssignmentToken  {
	
	public Automaton_InitialStateAssignment_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAutomatonAccess().getInitialStateAssignment_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Automaton_EqualsSignKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("initialState",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("initialState");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAutomatonAccess().getInitialStateStateCrossReference_5_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getAutomatonAccess().getInitialStateStateCrossReference_5_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ";"
protected class Automaton_SemicolonKeyword_6 extends KeywordToken  {
	
	public Automaton_SemicolonKeyword_6(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAutomatonAccess().getSemicolonKeyword_6();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Automaton_InitialStateAssignment_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ("error" "=" errorState=[State] ";")?
protected class Automaton_Group_7 extends GroupToken {
	
	public Automaton_Group_7(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getAutomatonAccess().getGroup_7();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Automaton_SemicolonKeyword_7_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "error"
protected class Automaton_ErrorKeyword_7_0 extends KeywordToken  {
	
	public Automaton_ErrorKeyword_7_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAutomatonAccess().getErrorKeyword_7_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Automaton_SemicolonKeyword_6(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// "="
protected class Automaton_EqualsSignKeyword_7_1 extends KeywordToken  {
	
	public Automaton_EqualsSignKeyword_7_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAutomatonAccess().getEqualsSignKeyword_7_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Automaton_ErrorKeyword_7_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// errorState=[State]
protected class Automaton_ErrorStateAssignment_7_2 extends AssignmentToken  {
	
	public Automaton_ErrorStateAssignment_7_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAutomatonAccess().getErrorStateAssignment_7_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Automaton_EqualsSignKeyword_7_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("errorState",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("errorState");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAutomatonAccess().getErrorStateStateCrossReference_7_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getAutomatonAccess().getErrorStateStateCrossReference_7_2_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ";"
protected class Automaton_SemicolonKeyword_7_3 extends KeywordToken  {
	
	public Automaton_SemicolonKeyword_7_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAutomatonAccess().getSemicolonKeyword_7_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Automaton_ErrorStateAssignment_7_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


// states+=State+
protected class Automaton_StatesAssignment_8 extends AssignmentToken  {
	
	public Automaton_StatesAssignment_8(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getAutomatonAccess().getStatesAssignment_8();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("states",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("states");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStateRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getAutomatonAccess().getStatesStateParserRuleCall_8_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Automaton_StatesAssignment_8(parent, next, actIndex, consumed);
			case 1: return new Automaton_Group_7(parent, next, actIndex, consumed);
			case 2: return new Automaton_SemicolonKeyword_6(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class Automaton_RightCurlyBracketKeyword_9 extends KeywordToken  {
	
	public Automaton_RightCurlyBracketKeyword_9(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getAutomatonAccess().getRightCurlyBracketKeyword_9();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Automaton_StatesAssignment_8(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Automaton ****************/


/************ begin Rule Class ****************
 *
 * Class:
 *   name=JAVAID;
 *
 **/

// name=JAVAID
protected class Class_NameAssignment extends AssignmentToken  {
	
	public Class_NameAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getClassAccess().getNameAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getClassRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getClassAccess().getNameJAVAIDParserRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule Class ****************/


/************ begin Rule State ****************
 *
 * State:
 *   "state" name=ID "{" transitions+=Transition* "}";
 *
 **/

// "state" name=ID "{" transitions+=Transition* "}"
protected class State_Group extends GroupToken {
	
	public State_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getStateAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_RightCurlyBracketKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getStateRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// "state"
protected class State_StateKeyword_0 extends KeywordToken  {
	
	public State_StateKeyword_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getStateKeyword_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}

// name=ID
protected class State_NameAssignment_1 extends AssignmentToken  {
	
	public State_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_StateKeyword_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getStateAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class State_LeftCurlyBracketKeyword_2 extends KeywordToken  {
	
	public State_LeftCurlyBracketKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getLeftCurlyBracketKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// transitions+=Transition*
protected class State_TransitionsAssignment_3 extends AssignmentToken  {
	
	public State_TransitionsAssignment_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getStateAccess().getTransitionsAssignment_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Transition_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("transitions",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("transitions");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTransitionRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getStateAccess().getTransitionsTransitionParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new State_TransitionsAssignment_3(parent, next, actIndex, consumed);
			case 1: return new State_LeftCurlyBracketKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class State_RightCurlyBracketKeyword_4 extends KeywordToken  {
	
	public State_RightCurlyBracketKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getStateAccess().getRightCurlyBracketKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new State_TransitionsAssignment_3(parent, this, 0, inst);
			case 1: return new State_LeftCurlyBracketKeyword_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule State ****************/


/************ begin Rule Transition ****************
 *
 * Transition:
 *   InvocationTransition|BranchedTransition;
 *
 **/

// InvocationTransition|BranchedTransition
protected class Transition_Alternatives extends AlternativesToken {

	public Transition_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getTransitionAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Transition_InvocationTransitionParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Transition_BranchedTransitionParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTransitionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// InvocationTransition
protected class Transition_InvocationTransitionParserRuleCall_0 extends RuleCallToken {
	
	public Transition_InvocationTransitionParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTransitionAccess().getInvocationTransitionParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InvocationTransition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(InvocationTransition_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getInvocationTransitionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// BranchedTransition
protected class Transition_BranchedTransitionParserRuleCall_1 extends RuleCallToken {
	
	public Transition_BranchedTransitionParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getTransitionAccess().getBranchedTransitionParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BranchedTransition_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(BranchedTransition_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getBranchedTransitionRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Transition ****************/


/************ begin Rule InvocationTransition ****************
 *
 * InvocationTransition:
 *   invocation=Invocation "->" state=[State] ";";
 *
 **/

// invocation=Invocation "->" state=[State] ";"
protected class InvocationTransition_Group extends GroupToken {
	
	public InvocationTransition_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getInvocationTransitionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InvocationTransition_SemicolonKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getInvocationTransitionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// invocation=Invocation
protected class InvocationTransition_InvocationAssignment_0 extends AssignmentToken  {
	
	public InvocationTransition_InvocationAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInvocationTransitionAccess().getInvocationAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Invocation_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("invocation",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("invocation");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInvocationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getInvocationTransitionAccess().getInvocationInvocationParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// "->"
protected class InvocationTransition_HyphenMinusGreaterThanSignKeyword_1 extends KeywordToken  {
	
	public InvocationTransition_HyphenMinusGreaterThanSignKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInvocationTransitionAccess().getHyphenMinusGreaterThanSignKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InvocationTransition_InvocationAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// state=[State]
protected class InvocationTransition_StateAssignment_2 extends AssignmentToken  {
	
	public InvocationTransition_StateAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getInvocationTransitionAccess().getStateAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InvocationTransition_HyphenMinusGreaterThanSignKeyword_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("state",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("state");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInvocationTransitionAccess().getStateStateCrossReference_2_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getInvocationTransitionAccess().getStateStateCrossReference_2_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ";"
protected class InvocationTransition_SemicolonKeyword_3 extends KeywordToken  {
	
	public InvocationTransition_SemicolonKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getInvocationTransitionAccess().getSemicolonKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new InvocationTransition_StateAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule InvocationTransition ****************/


/************ begin Rule BranchedTransition ****************
 *
 * BranchedTransition:
 *   invocation=Invocation "returns" value=BooleanLiteral "->" state=[State] ";";
 *
 **/

// invocation=Invocation "returns" value=BooleanLiteral "->" state=[State] ";"
protected class BranchedTransition_Group extends GroupToken {
	
	public BranchedTransition_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getBranchedTransitionAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BranchedTransition_SemicolonKeyword_5(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBranchedTransitionRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// invocation=Invocation
protected class BranchedTransition_InvocationAssignment_0 extends AssignmentToken  {
	
	public BranchedTransition_InvocationAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBranchedTransitionAccess().getInvocationAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Invocation_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("invocation",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("invocation");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInvocationRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBranchedTransitionAccess().getInvocationInvocationParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// "returns"
protected class BranchedTransition_ReturnsKeyword_1 extends KeywordToken  {
	
	public BranchedTransition_ReturnsKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBranchedTransitionAccess().getReturnsKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BranchedTransition_InvocationAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// value=BooleanLiteral
protected class BranchedTransition_ValueAssignment_2 extends AssignmentToken  {
	
	public BranchedTransition_ValueAssignment_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBranchedTransitionAccess().getValueAssignment_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BooleanLiteral_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("value",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("value");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBooleanLiteralRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getBranchedTransitionAccess().getValueBooleanLiteralParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BranchedTransition_ReturnsKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "->"
protected class BranchedTransition_HyphenMinusGreaterThanSignKeyword_3 extends KeywordToken  {
	
	public BranchedTransition_HyphenMinusGreaterThanSignKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBranchedTransitionAccess().getHyphenMinusGreaterThanSignKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BranchedTransition_ValueAssignment_2(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// state=[State]
protected class BranchedTransition_StateAssignment_4 extends AssignmentToken  {
	
	public BranchedTransition_StateAssignment_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBranchedTransitionAccess().getStateAssignment_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BranchedTransition_HyphenMinusGreaterThanSignKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("state",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("state");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBranchedTransitionAccess().getStateStateCrossReference_4_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getBranchedTransitionAccess().getStateStateCrossReference_4_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ";"
protected class BranchedTransition_SemicolonKeyword_5 extends KeywordToken  {
	
	public BranchedTransition_SemicolonKeyword_5(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBranchedTransitionAccess().getSemicolonKeyword_5();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BranchedTransition_StateAssignment_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule BranchedTransition ****************/


/************ begin Rule Invocation ****************
 *
 * Invocation:
 *   Method|Constructor;
 *
 **/

// Method|Constructor
protected class Invocation_Alternatives extends AlternativesToken {

	public Invocation_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getInvocationAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Invocation_MethodParserRuleCall_0(parent, this, 0, inst);
			case 1: return new Invocation_ConstructorParserRuleCall_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getInvocationRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// Method
protected class Invocation_MethodParserRuleCall_0 extends RuleCallToken {
	
	public Invocation_MethodParserRuleCall_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getInvocationAccess().getMethodParserRuleCall_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Method_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Method_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getMethodRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}

// Constructor
protected class Invocation_ConstructorParserRuleCall_1 extends RuleCallToken {
	
	public Invocation_ConstructorParserRuleCall_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public RuleCall getGrammarElement() {
		return grammarAccess.getInvocationAccess().getConstructorParserRuleCall_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Constructor_Group(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if(checkForRecursion(Constructor_Group.class, current)) return null;
		if(!current.isInstanceOf(grammarAccess.getConstructorRule().getType().getClassifier())) return null;
		return current;
	}
	
	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Invocation ****************/


/************ begin Rule Method ****************
 *
 * Method:
 *   returntype=Type name=ID "(" (args+=Type ("," args+=Type)*)? ")";
 *
 **/

// returntype=Type name=ID "(" (args+=Type ("," args+=Type)*)? ")"
protected class Method_Group extends GroupToken {
	
	public Method_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getMethodAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Method_RightParenthesisKeyword_4(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getMethodRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// returntype=Type
protected class Method_ReturntypeAssignment_0 extends AssignmentToken  {
	
	public Method_ReturntypeAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMethodAccess().getReturntypeAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Type_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("returntype",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("returntype");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getMethodAccess().getReturntypeTypeParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			default: return parent.createParentFollower(next, actIndex , index, consumed);
		}	
	}	
}

// name=ID
protected class Method_NameAssignment_1 extends AssignmentToken  {
	
	public Method_NameAssignment_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMethodAccess().getNameAssignment_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Method_ReturntypeAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for lexer rule
			type = AssignmentType.LRC;
			element = grammarAccess.getMethodAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "("
protected class Method_LeftParenthesisKeyword_2 extends KeywordToken  {
	
	public Method_LeftParenthesisKeyword_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMethodAccess().getLeftParenthesisKeyword_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Method_NameAssignment_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (args+=Type ("," args+=Type)*)?
protected class Method_Group_3 extends GroupToken {
	
	public Method_Group_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getMethodAccess().getGroup_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Method_Group_3_1(parent, this, 0, inst);
			case 1: return new Method_ArgsAssignment_3_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// args+=Type
protected class Method_ArgsAssignment_3_0 extends AssignmentToken  {
	
	public Method_ArgsAssignment_3_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMethodAccess().getArgsAssignment_3_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Type_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("args",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("args");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getMethodAccess().getArgsTypeParserRuleCall_3_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Method_LeftParenthesisKeyword_2(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," args+=Type)*
protected class Method_Group_3_1 extends GroupToken {
	
	public Method_Group_3_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getMethodAccess().getGroup_3_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Method_ArgsAssignment_3_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Method_CommaKeyword_3_1_0 extends KeywordToken  {
	
	public Method_CommaKeyword_3_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMethodAccess().getCommaKeyword_3_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Method_Group_3_1(parent, this, 0, inst);
			case 1: return new Method_ArgsAssignment_3_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// args+=Type
protected class Method_ArgsAssignment_3_1_1 extends AssignmentToken  {
	
	public Method_ArgsAssignment_3_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getMethodAccess().getArgsAssignment_3_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Type_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("args",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("args");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getMethodAccess().getArgsTypeParserRuleCall_3_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Method_CommaKeyword_3_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ")"
protected class Method_RightParenthesisKeyword_4 extends KeywordToken  {
	
	public Method_RightParenthesisKeyword_4(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getMethodAccess().getRightParenthesisKeyword_4();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Method_Group_3(parent, this, 0, inst);
			case 1: return new Method_LeftParenthesisKeyword_2(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Method ****************/


/************ begin Rule Constructor ****************
 *
 * Constructor:
 *   klass=[Class] "(" (args+=Type ("," args+=Type)*)? ")";
 *
 **/

// klass=[Class] "(" (args+=Type ("," args+=Type)*)? ")"
protected class Constructor_Group extends GroupToken {
	
	public Constructor_Group(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getConstructorAccess().getGroup();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Constructor_RightParenthesisKeyword_3(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getConstructorRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// klass=[Class]
protected class Constructor_KlassAssignment_0 extends AssignmentToken  {
	
	public Constructor_KlassAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getConstructorAccess().getKlassAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("klass",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("klass");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConstructorAccess().getKlassClassCrossReference_0_0().getType().getClassifier())) {
				type = AssignmentType.CR;
				element = grammarAccess.getConstructorAccess().getKlassClassCrossReference_0_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "("
protected class Constructor_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public Constructor_LeftParenthesisKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getConstructorAccess().getLeftParenthesisKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Constructor_KlassAssignment_0(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// (args+=Type ("," args+=Type)*)?
protected class Constructor_Group_2 extends GroupToken {
	
	public Constructor_Group_2(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getConstructorAccess().getGroup_2();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Constructor_Group_2_1(parent, this, 0, inst);
			case 1: return new Constructor_ArgsAssignment_2_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// args+=Type
protected class Constructor_ArgsAssignment_2_0 extends AssignmentToken  {
	
	public Constructor_ArgsAssignment_2_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getConstructorAccess().getArgsAssignment_2_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Type_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("args",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("args");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getConstructorAccess().getArgsTypeParserRuleCall_2_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Constructor_LeftParenthesisKeyword_1(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," args+=Type)*
protected class Constructor_Group_2_1 extends GroupToken {
	
	public Constructor_Group_2_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Group getGrammarElement() {
		return grammarAccess.getConstructorAccess().getGroup_2_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Constructor_ArgsAssignment_2_1_1(parent, this, 0, inst);
			default: return null;
		}	
	}	
		
}

// ","
protected class Constructor_CommaKeyword_2_1_0 extends KeywordToken  {
	
	public Constructor_CommaKeyword_2_1_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getConstructorAccess().getCommaKeyword_2_1_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Constructor_Group_2_1(parent, this, 0, inst);
			case 1: return new Constructor_ArgsAssignment_2_0(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}

// args+=Type
protected class Constructor_ArgsAssignment_2_1_1 extends AssignmentToken  {
	
	public Constructor_ArgsAssignment_2_1_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getConstructorAccess().getArgsAssignment_2_1_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Type_NameAssignment(this, this, 0, inst);
			default: return null;
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("args",false)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("args");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IInstanceDescription param = getDescr((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTypeRule().getType().getClassifier())) {
				type = AssignmentType.PRC;
				element = grammarAccess.getConstructorAccess().getArgsTypeParserRuleCall_2_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

	public AbstractToken createParentFollower(AbstractToken next,	int actIndex, int index, IInstanceDescription inst) {
		if(value == inst.getDelegate() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Constructor_CommaKeyword_2_1_0(parent, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// ")"
protected class Constructor_RightParenthesisKeyword_3 extends KeywordToken  {
	
	public Constructor_RightParenthesisKeyword_3(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getConstructorAccess().getRightParenthesisKeyword_3();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new Constructor_Group_2(parent, this, 0, inst);
			case 1: return new Constructor_LeftParenthesisKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
}


/************ end Rule Constructor ****************/


/************ begin Rule Type ****************
 *
 * Type:
 *   name=JAVAID;
 *
 **/

// name=JAVAID
protected class Type_NameAssignment extends AssignmentToken  {
	
	public Type_NameAssignment(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getTypeAccess().getNameAssignment();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getTypeRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("name",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("name");
		if(Boolean.TRUE.booleanValue()) { // org::eclipse::xtext::impl::RuleCallImpl FIXME: check if value is valid for datatype rule
			type = AssignmentType.DRC;
			element = grammarAccess.getTypeAccess().getNameJAVAIDParserRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule Type ****************/



/************ begin Rule BooleanLiteral ****************
 *
 * BooleanLiteral:
 *   true?="true"|"false";
 *
 **/

// true?="true"|"false"
protected class BooleanLiteral_Alternatives extends AlternativesToken {

	public BooleanLiteral_Alternatives(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Alternatives getGrammarElement() {
		return grammarAccess.getBooleanLiteralAccess().getAlternatives();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			case 0: return new BooleanLiteral_TrueAssignment_0(parent, this, 0, inst);
			case 1: return new BooleanLiteral_FalseKeyword_1(parent, this, 1, inst);
			default: return null;
		}	
	}	
		
	public IInstanceDescription tryConsume() {
		if(!current.isInstanceOf(grammarAccess.getBooleanLiteralRule().getType().getClassifier())) return null;
		return tryConsumeVal();
	}
}

// true?="true"
protected class BooleanLiteral_TrueAssignment_0 extends AssignmentToken  {
	
	public BooleanLiteral_TrueAssignment_0(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Assignment getGrammarElement() {
		return grammarAccess.getBooleanLiteralAccess().getTrueAssignment_0();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
	protected IInstanceDescription tryConsumeVal() {
		if((value = current.getConsumable("true",true)) == null) return null;
		IInstanceDescription obj = current.cloneAndConsume("true");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KW;
			element = grammarAccess.getBooleanLiteralAccess().getTrueTrueKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// "false"
protected class BooleanLiteral_FalseKeyword_1 extends KeywordToken  {
	
	public BooleanLiteral_FalseKeyword_1(AbstractToken parent, AbstractToken next, int no, IInstanceDescription current) {
		super(parent, next, no, current);
	}
	
	public Keyword getGrammarElement() {
		return grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1();
	}

	public AbstractToken createFollower(int index, IInstanceDescription inst) {
		switch(index) {
			default: return parent.createParentFollower(this, index, index, inst);
		}	
	}	
		
}


/************ end Rule BooleanLiteral ****************/

}
